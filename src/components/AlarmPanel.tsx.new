import { useState, useEffect } from 'react';
import { Badge } from "./ui/badge";
import { Button } from "./ui/button";
import { Bell, BellRing, CheckCircle2, RefreshCw } from "lucide-react";
import { fetchCTActiveAlarms, syncCTAlarms } from "../services/ctAlarmsService";

// Definición del tipo para las alarmas
interface Alarm {
  id: string;
  deviceId: string;
  deviceName: string;
  message: string;
  severity: "critical" | "warning" | "info";
  timestamp: Date;
  acknowledged: boolean;
}

// Mapeo de nombres de campo de alarmas del CT a mensajes descriptivos
const ctAlarmMessages: Record<string, {message: string, severity: "critical" | "warning" | "info"}> = {
  error_comunicacion: { message: "Error de comunicación con el Carro Transferidor", severity: "critical" },
  emergencia_armario_carro: { message: "Emergencia en armario del carro", severity: "critical" },
  anomalia_variador: { message: "Anomalía en el variador", severity: "warning" },
  anomalia_motor_traslacion: { message: "Anomalía en motor de traslación", severity: "warning" },
  anomalia_motor_entrada: { message: "Anomalía en motor de entrada", severity: "warning" },
  anomalia_motor_salida: { message: "Anomalía en motor de salida", severity: "warning" },
  final_carrera_pasillo_1: { message: "Final de carrera pasillo 1", severity: "warning" },
  final_carrera_pasillo_12: { message: "Final de carrera pasillo 12", severity: "warning" },
  paleta_descentrada_transfer_entrada: { message: "Paleta descentrada en transfer de entrada", severity: "warning" },
  paleta_descentrada_transfer_salida: { message: "Paleta descentrada en transfer de salida", severity: "warning" },
  limite_inferior_lectura_encoder: { message: "Límite inferior de lectura del encoder", severity: "info" },
  limite_superior_lectura_encoder: { message: "Límite superior de lectura del encoder", severity: "info" },
  tiempo_transferencia_mesa_salida_carro: { message: "Tiempo de transferencia mesa salida carro excedido", severity: "warning" },
  telemetro: { message: "Problema con telemetro", severity: "warning" },
  tiempo_entrada: { message: "Tiempo de entrada excedido", severity: "warning" },
  tiempo_salida: { message: "Tiempo de salida excedido", severity: "warning" },
  paleta_entrada_sin_codigo: { message: "Paleta de entrada sin código", severity: "info" },
  paleta_salida_sin_codigo: { message: "Paleta de salida sin código", severity: "info" }
}

const AlarmPanel = () => {
  const [alarms, setAlarms] = useState<Alarm[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);
  
  // Función para cargar las alarmas activas del CT
  const loadCTAlarms = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('Cargando alarmas del CT...');
      const response = await fetchCTActiveAlarms();
      console.log('Respuesta recibida:', response);
      
      if (response.success) {
        // Si hay datos de alarmas y es un array
        if (response.data && Array.isArray(response.data)) {
          console.log(`Se encontraron ${response.data.length} alarmas activas`);
          
          // Los datos ya vienen en el formato correcto desde la API
          const ctAlarms: Alarm[] = response.data.map((alarm: any) => ({
            ...alarm,
            timestamp: new Date(alarm.timestamp) // Convertir el timestamp a objeto Date
          }));
          
          setAlarms(ctAlarms);
          setLastUpdated(new Date());
        } else {
          console.log('No hay alarmas activas');
          setAlarms([]);
          setLastUpdated(new Date());
        }
      } else {
        console.error('Error en la respuesta:', response);
        setError("Error al cargar las alarmas");
      }
    } catch (err) {
      setError("Error de conexión al servidor");
      console.error("Error al cargar alarmas del CT:", err);
    } finally {
      setLoading(false);
    }
  };
  
  // Función para sincronizar manualmente las alarmas
  const handleSyncAlarms = async () => {
    try {
      setLoading(true);
      setError(null); // Limpiar errores anteriores
      
      console.log('Iniciando sincronización manual de alarmas...');
      const success = await syncCTAlarms();
      
      if (success) {
        console.log('Sincronización exitosa, recargando alarmas...');
        // Esperar un momento para que la base de datos se actualice completamente
        setTimeout(async () => {
          await loadCTAlarms();
        }, 1000);
      } else {
        console.error('La sincronización no fue exitosa');
        setError("Error al sincronizar las alarmas");
      }
    } catch (err) {
      setError("Error de conexión al servidor");
      console.error("Error al sincronizar alarmas del CT:", err);
    } finally {
      setLoading(false);
    }
  };
  
  // Cargar alarmas al montar el componente
  useEffect(() => {
    loadCTAlarms();
    
    // Configurar intervalo para actualizar las alarmas cada 30 segundos
    const interval = setInterval(() => {
      loadCTAlarms();
    }, 30000);
    
    return () => clearInterval(interval);
  }, []);

  // Función para marcar una alarma como reconocida
  const acknowledgeAlarm = (id: string) => {
    setAlarms(prev =>
      prev.map(alarm =>
        alarm.id === id ? { ...alarm, acknowledged: true } : alarm
      )
    );
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "text-red-600 bg-red-50";
      case "warning":
        return "text-amber-600 bg-amber-50";
      case "info":
        return "text-blue-600 bg-blue-50";
      default:
        return "text-gray-600 bg-gray-50";
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical":
        return <BellRing className="h-5 w-5 text-red-600" />;
      case "warning":
        return <Bell className="h-5 w-5 text-amber-600" />;
      case "info":
        return <Bell className="h-5 w-5 text-blue-600" />;
      default:
        return <Bell className="h-5 w-5 text-gray-600" />;
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('es-ES', { 
      hour: '2-digit', 
      minute: '2-digit',
      hour12: false 
    });
  };

  return (
    <div className="bg-white rounded-xl shadow-operator p-4 my-8">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-lg font-medium text-gray-800">
          Alarmas Activas <span className="text-sm font-normal text-gray-500">({alarms.filter(a => !a.acknowledged).length} sin reconocer)</span>
        </h2>
        <div className="flex space-x-2">
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-50 text-red-600">
            Críticas: {alarms.filter(a => a.severity === "critical" && !a.acknowledged).length}
          </span>
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-amber-50 text-amber-600">
            Advertencias: {alarms.filter(a => a.severity === "warning" && !a.acknowledged).length}
          </span>
          <Button 
            variant="outline" 
            size="icon" 
            onClick={handleSyncAlarms} 
            disabled={loading}
            className="ml-2"
          >
            <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
          </Button>
        </div>
      </div>
      
      {error && (
        <div className="mb-4 p-2 bg-red-50 text-red-600 text-sm rounded-md">
          {error}
        </div>
      )}
      
      {lastUpdated && (
        <div className="mb-4 text-xs text-gray-500">
          Última actualización: {lastUpdated.toLocaleTimeString()}
        </div>
      )}
      
      {alarms.length === 0 ? (
        <div className="text-center py-8 text-gray-500">
          No hay alarmas activas en este momento
        </div>
      ) : (
        <div className="overflow-hidden rounded-lg border border-gray-200 max-h-[300px] overflow-y-auto">
          <ul className="divide-y divide-gray-200">
            {alarms.map((alarm) => (
              <li 
                key={alarm.id} 
                className={`p-4 flex items-start justify-between ${
                  alarm.acknowledged ? "bg-gray-50" : getSeverityColor(alarm.severity)
                }`}
              >
                <div className="flex items-start space-x-3">
                  <div className="flex-shrink-0 pt-0.5">
                    {alarm.acknowledged ? (
                      <CheckCircle2 className="h-5 w-5 text-green-600" />
                    ) : (
                      getSeverityIcon(alarm.severity)
                    )}
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-900">
                      {alarm.deviceName} ({alarm.deviceId})
                    </p>
                    <p className="text-sm text-gray-700">{alarm.message}</p>
                    <p className="text-xs text-gray-500 mt-1">
                      {formatTime(alarm.timestamp)}
                    </p>
                  </div>
                </div>
                {!alarm.acknowledged && (
                  <button
                    onClick={() => acknowledgeAlarm(alarm.id)}
                    className="ml-3 flex-shrink-0 bg-white rounded-md text-sm font-medium text-indigo-600 hover:text-indigo-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 px-3 py-1 border border-gray-300"
                  >
                    Reconocer
                  </button>
                )}
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default AlarmPanel;
